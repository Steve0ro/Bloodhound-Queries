[    
    {
        "name": "Find the Shortest path to a high value target from an owned object",
        "query": "MATCH p=shortestPath((g {owned:true})-[*1..]->(n {highvalue:true})) WHERE  g<>n RETURN p LIMIT 100"
    },
    {
        "name": "Find the Shortest path to a unconstrained delegation system from an owned object",
        "query": "MATCH (n) MATCH p=shortestPath((n)-[*1..]->(m:Computer {unconstraineddelegation: true})) WHERE NOT n=m AND n.owned = true RETURN p LIMIT 100"
    },
    {
        "name": "Find all Certificate Templates",
        "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' RETURN n LIMIT 100"
    },
    {
        "name": "Find enabled Certificate Templates",
        "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' and n.Enabled = true RETURN n LIMIT 100"
    },
    {
        "name": "Find Certificate Authorities",
        "query": "MATCH (n:GPO) WHERE n.type = 'Enrollment Service' RETURN n LIMIT 100"
    },
    {
        "name": "Show Enrollment Rights for Certificate Template",
        "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' RETURN n.name LIMIT 100"
    },
    {
        "name": "Show Rights for Certificate Authority",
        "query": "MATCH (n:GPO) WHERE n.type = 'Enrollment Service' RETURN n.name LIMIT 100"
    },
    {
        "name": "Find Misconfigured Certificate Templates (ESC1)",
        "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' and n.`Enrollee Supplies Subject` = true and n.`Client Authentication` = true and n.`Enabled` = true  RETURN n LIMIT 100"
    },
    {
        "name": "Shortest Paths to Misconfigured Certificate Templates from Owned Principals (ESC1)",
        "query": "MATCH p=allShortestPaths((g {owned:true})-[*1..]->(n:GPO)) WHERE  g<>n and n.type = 'Certificate Template' and n.`Enrollee Supplies Subject` = true and n.`Client Authentication` = true and n.`Enabled` = true RETURN p LIMIT 100"
    },
    {
        "name": "Find Misconfigured Certificate Templates (ESC2)",
        "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' and n.`Enabled` = true and (n.`Extended Key Usage` = [] or 'Any Purpose' IN n.`Extended Key Usage`)  RETURN n LIMIT 100"
    },
    {
        "name": "Shortest Paths to Misconfigured Certificate Templates from Owned Principals (ESC2)",
        "query": "MATCH p=allShortestPaths((g {owned:true})-[*1..]->(n:GPO)) WHERE  g<>n and n.type = 'Certificate Template' and n.`Enabled` = true and (n.`Extended Key Usage` = [] or 'Any Purpose' IN n.`Extended Key Usage`) RETURN p LIMIT 100"
    },
    {
        "name": "Find Enrollment Agent Templates (ESC3)",
        "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' and n.`Enabled` = true and (n.`Extended Key Usage` = [] or 'Any Purpose' IN n.`Extended Key Usage` or 'Certificate Request Agent' IN n.`Extended Key Usage`)  RETURN n LIMIT 100"
    },
    {
        "name": "Shortest Paths to Enrollment Agent Templates from Owned Principals (ESC3)",
        "query": "MATCH p=allShortestPaths((g {owned:true})-[*1..]->(n:GPO)) WHERE  g<>n and n.type = 'Certificate Template' and n.`Enabled` = true and (n.`Extended Key Usage` = [] or 'Any Purpose' IN n.`Extended Key Usage` or 'Certificate Request Agent' IN n.`Extended Key Usage`) RETURN p LIMIT 100"
    },
    {
        "name": "Shortest Paths to Vulnerable Certificate Template Access Control (ESC4)",
        "query": "MATCH p=shortestPath((g)-[:GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner*1..]->(n:GPO)) WHERE  g<>n and n.type = 'Certificate Template' and n.`Enabled` = true RETURN p LIMIT 100"
    },
    {
        "name": "Shortest Paths to Vulnerable Certificate Template Access Control from Owned Principals (ESC4)",
        "query": "MATCH p=allShortestPaths((g {owned:true})-[r*1..]->(n:GPO)) WHERE g<>n and n.type = 'Certificate Template' and n.Enabled = true and NONE(x in relationships(p) WHERE type(x) = 'Enroll' or type(x) = 'AutoEnroll') RETURN p LIMIT 100"
    },
    {
        "name": "Find Certificate Authorities with User Specified SAN (ESC6)",
        "query": "MATCH (n:GPO) WHERE n.type = 'Enrollment Service' and n.`User Specified SAN` = 'Enabled' RETURN n LIMIT 100"
    },
    {
        "name": "Shortest Paths to Vulnerable Certificate Authority Access Control (ESC7)",
        "query": "MATCH p=shortestPath((g)-[r:GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|ManageCa|ManageCertificates*1..]->(n:GPO)) WHERE  g<>n and n.type = 'Enrollment Service' RETURN p LIMIT 100"
    },
    {
        "name": "Shortest Paths to Vulnerable Certificate Authority Access Control from Owned Principals (ESC7)",
        "query": "MATCH p=allShortestPaths((g {owned:true})-[*1..]->(n:GPO)) WHERE  g<>n and n.type = 'Enrollment Service' and NONE(x in relationships(p) WHERE type(x) = 'Enroll' or type(x) = 'AutoEnroll') RETURN p LIMIT 100"
    },
    {
        "name": "Find Certificate Authorities with HTTP Web Enrollment (ESC8)",
        "query": "MATCH (n:GPO) WHERE n.type = 'Enrollment Service' and n.`Web Enrollment` = 'Enabled' RETURN n LIMIT 100"
    },
    {
        "name": "Find users with blank passwords that are enabled",
        "query": "MATCH (u:User) WHERE NOT u.userpassword IS null AND u.enabled = TRUE RETURN u.name,u.userpassword LIMIT 100"
    },
    {
        "name": "Find users with Temp in user title and created in the last 30 days",
        "query": "MATCH (u:User) where u.enabled=TRUE and u.whencreated  > (datetime().epochseconds - (30 * 86400)) AND u.title CONTAINS 'Temp' RETURN u LIMIT 100"
    },
    {
        "name": "Find users created in the last 30 days",
        "query": "MATCH (u:User) where u.enabled=TRUE and u.whencreated  > (datetime().epochseconds - (30 * 86400)) RETURN u LIMIT 100"
    },
    {
        "name": "Find users' credentials in description fields",
        "query": "MATCH (m:User) WHERE m.description CONTAINS 'password' RETURN m.name, m.description LIMIT 100"
    },
    {
        "name": "Find Server 2000 and Enabled",
        "query": "MATCH (H:Computer) WHERE H.operatingsystem =~ '(?i).*(2000).*' AND H.enabled = TRUE RETURN H LIMIT 100"
    },
    {
        "name": "Find Server 2000 with session",
        "query": "MATCH (H:Computer)-[:HasSession]->(y) WHERE H.operatingsystem =~ '(?i).*(2000).*' RETURN H LIMIT 100"
    },
    {
        "name": "Find Server 2003 and Enabled",
        "query": "MATCH (H:Computer) WHERE H.operatingsystem =~ '(?i).*(2003).*' AND H.enabled = TRUE RETURN H LIMIT 100"
    },
    {
        "name": "All computers without LAPS and the computer is enabled",
        "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(c:Computer) WHERE c.haslaps = false AND c.enabled = true RETURN p LIMIT 100"
    },
    {
        "name": "Find Server 2003 with session",
        "query": "MATCH (H:Computer)-[:HasSession]->(y) WHERE H.operatingsystem =~ '(?i).*(2003).*' RETURN H LIMIT 100"
    },
    {
        "name": "Find Server 2008 and Enabled",
        "query": "MATCH (H:Computer) WHERE H.operatingsystem =~ '(?i).*(2008).*' AND H.enabled = TRUE RETURN H LIMIT 100"
    },
    {
        "name": "List all owned users",
        "query": "MATCH (m:User) WHERE m.owned=TRUE RETURN m"
    },
    {
        "name": "Kerberoastable Admins",
        "query": "MATCH (n:Group) WHERE n.objectsid =~ $sid WITH n MATCH p=(n)<-[MemberOf*1..]-(m {hasspn: true}) RETURN p LIMIT 100"
    },
    {
        "name": "All Kerberoastable Users",
        "query": "MATCH (n {hasspn: true}) RETURN n LIMIT 100"
    },
    {
        "name": "Where can owned users RDP",
        "query": "MATCH p=(m:User {owned: true})-[r:MemberOf|CanRDP*1..]->(n:Computer) RETURN p LIMIT 100"
    },
    {
        "name": "Users with most local admin rights",
        "query": "MATCH (U:User)-[r:MemberOf|AdminTo*1..]->(C:Computer) WITH U.name as n, COUNT(DISTINCT(C)) AS c RETURN n,c ORDER BY c DESC LIMIT 5"
    },
    {
        "name": "All Owned Nodes",
        "query": "MATCH (n {owned: true}) RETURN n LIMIT 100"
    },
    {
        "name": "Find computers with owned Admins",
        "query": "MATCH p=shortestPath((n:User {owned:true})-[r:AdminTo|MemberOf*1..]->(c:Computer)) RETURN p LIMIT 100"
    },
    {
        "name": "Find owned Groups",
        "query": "MATCH (n:User {owned: true})-[r:MemberOf]->(g:Group) RETURN g LIMIT 100"
    },
    {
        "name": "Find owned Domain Admins",
        "query": "MATCH (n:Group) WHERE n.name =~ $name AND n.owned=true WITH n MATCH p=(n)<-[r:MemberOf*1..]-(m) RETURN p LIMIT 100"
    },
    {
        "name": "Find Shortest Path from owned Node to Domain Admin",
        "query": "MATCH (n:Group) WHERE n.name =~ $name RETURN n.name ORDER BY n.name DESC LIMIT 100"
    },
    {
        "name": "Shortest paths from owned objects to High Value Targets (5 hops)",
        "query": "MATCH p=shortestPath((n {owned:true})-[:MemberOf|HasSession|AdminTo|AllExtendedRights|AddMember|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|CanRDP|ExecuteDCOM|AllowedToDelegate|ReadLAPSPassword|Contains|GpLink|AddAllowedToAct|AllowedToAct|SQLAdmin|ReadGMSAPassword|HasSIDHistory|CanPSRemote*1..5]->(m {highvalue:true})) WHERE NOT n=m RETURN p LIMIT 100"
    },
    {
        "name": "Most exploitable paths from owned objects to High Value Targets (5 hops)",
        "query": "MATCH p=allShortestPaths((n {owned:true})-[:MemberOf|AdminTo|AllExtendedRights|AddMember|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|ExecuteDCOM|AllowedToDelegate|ReadLAPSPassword|Contains|GpLink|AddAllowedToAct|AllowedToAct|SQLAdmin|ReadGMSAPassword|HasSIDHistory*1..5]->(m {highvalue:true})) WHERE NOT n=m RETURN p LIMIT 100"
    },
    {
        "name": "Next steps (5 hops) from owned objects",
        "query": "MATCH p=shortestPath((c {owned: true})-[*1..5]->(s)) WHERE NOT c = s RETURN p LIMIT 100"
    },
    {
        "name": "Unconstrained Delegation systems",
        "query": "MATCH (c {unconstraineddelegation:true}) RETURN c LIMIT 100"
    },
    {
        "name": "Constrained Delegation systems",
        "query": "MATCH p=(u)-[:AllowedToDelegate]->(c) RETURN p LIMIT 100"
    },
    {
        "name": "Unconstrained Delegation systems (without domain controllers)",
        "query": "MATCH (c1:Computer)-[:MemberOf*1..]->(g:Group) WHERE g.objectid ENDS WITH '-516' WITH COLLECT(c1.name) AS domainControllers MATCH (c2 {unconstraineddelegation:true}) WHERE NOT c2.name IN domainControllers RETURN c2 LIMIT 100"
    },
    {
        "name": "(Warning: edits the DB) Mark unconstrained delegation systems as high value targets",
        "query": "MATCH (c1:Computer)-[:MemberOf*1..]->(g:Group) WHERE g.objectid ENDS WITH '-516' WITH COLLECT(c1.name) AS domainControllers MATCH (c2 {unconstraineddelegation:true}) WHERE NOT c2.name IN domainControllers SET c2.highvalue = true RETURN c2 LIMIT 100"
    },
    {
        "name": "Shortest paths from owned principals to unconstrained delegation systems",
        "query": "MATCH (n {owned:true}) MATCH p=shortestPath((n)-[:MemberOf|HasSession|AdminTo|AllExtendedRights|AddMember|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|ExecuteDCOM|AllowedToDelegate|ReadLAPSPassword|Contains|GpLink|AddAllowedToAct|AllowedToAct|SQLAdmin|ReadGMSAPassword|HasSIDHistory|CanPSRemote*1..]->(m:Computer {unconstraineddelegation: true})) WHERE NOT n=m RETURN p LIMIT 100"
    },
    {
        "name": "Users with adminCount, not sensitive for delegation, not members of Protected Users",
        "query": "MATCH (u)-[:MemberOf*1..]->(g:Group) WHERE g.objectid =~ \"(?i)S-1-5-.*-525\" WITH COLLECT (u.name) as protectedUsers MATCH p=(u2:User)-[:MemberOf*1..3]->(g2:Group) WHERE u2.admincount=true AND u2.sensitive=false AND NOT u2.name IN protectedUsers RETURN p LIMIT 100"
    },
    {
        "name": "Groups that contain the word 'admin'",
        "query": "Match (n:Group) WHERE n.name CONTAINS 'ADMIN' RETURN n LIMIT 100"
    },
    {
        "name": "Find users that can RDP into something",
        "query": "match (u1:User) WHERE u1.plaintext=True MATCH p1=(u1)-[:CanRDP*1..]->(c:Computer) RETURN u1 LIMIT 100"
    },
    {
        "name": "Find users that belong to high value groups",
        "query": "match (u1:User) WHERE u1.plaintext=True MATCH p=(u1:User)-[r:MemberOf*1..]->(m:Group {highvalue:true}) RETURN u1 LIMIT 100"
    },
    {
        "name": "Find kerberoastable users",
        "query": "match (u1:User) WHERE u1.plaintext=True AND u1.hasspn=True RETURN u1 LIMIT 100"
    },
    {
        "name": "Return users with seasons in their password and are high value targets",
        "query": "MATCH (u1:User) WHERE u1.plaintextpassword =~ \"([Ww]inter.*|[sS]pring.*|[sS]ummer.*|[fF]all.*)\" MATCH p=(u1:User)-[r:MemberOf*1..]->(m:Group {highvalue:true}) RETURN u1 LIMIT 100"
    },
    {
        "name": "Return users with seasons in their password and have local admin on at least one computer",
        "query": "match (u1:User) WHERE u1.plaintextpassword =~ \"([Ww]inter.*|[sS]pring.*|[sS]ummer.*|[fF]all.*)\" match p=(u1:User)-[r:AdminTo]->(n:Computer) RETURN p LIMIT 100"
    },
    {
        "name": "Return users with seasons in their password and a path to high value targets (limit to 25 results)",
        "query": "match (u1:User) WHERE u1.plaintextpassword =~ \"([Ww]inter.*|[sS]pring.*|[sS]ummer.*|[fF]all.*)\" MATCH p=shortestPath((u1:User)-[*1..]->(n {highvalue:true})) WHERE  u1<>n return u1 LIMIT 25"
    },
    {
        "name": "Return users with a variant of \"password\" in their password and are high value targets",
        "query": "MATCH (u1:User) WHERE u1.plaintextpassword =~ \"(.*[pP][aA@][sS$][sS$][wW][oO0][rR][dD].*)\" MATCH p=(u1:User)-[r:MemberOf*1..]->(m:Group {highvalue:true}) RETURN u1 LIMIT 100"
    },
    {
        "name": "Return users with a variant of \"password\" in their password and have local admin on at least one computer",
        "query": "match (u1:User) WHERE u1.plaintextpassword =~ \"(.*[pP][aA@][sS$][sS$][wW][oO0][rR][dD].*)\" match p=(u1:User)-[r:AdminTo]->(n:Computer) RETURN p LIMIT 100"
    },
    {
        "name": "Return users with a variant of \"password\" in their password and a path to high value targets (limit to 25 results)",
        "query": "match (u1:User) WHERE u1.plaintextpassword =~ \"(.*[pP][aA@][sS$][sS$][wW][oO0][rR][dD].*)\"  MATCH p=shortestPath((u1:User)-[*1..]->(n {highvalue:true})) WHERE  u1<>n return u1 LIMIT 25"
    },
    {
        "name": "Groups of High Value Targets",
        "query": "MATCH p=(n:User)-[r:MemberOf*1..]->(m:Group {highvalue:true}) RETURN p LIMIT 100"
    },
    {
        "name": "Non Admin Groups with High Value Privileges",
        "query": "MATCH p=(g:Group)-[r:Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|GenericWrite|AllowedToDelegate|ForceChangePassword]->(n:Computer)  WHERE NOT g.name CONTAINS 'ADMIN' RETURN p LIMIT 100"
    },
    {
        "name": "Groups with Computer and User Objects",
        "query": "MATCH (c:Computer)-[r:MemberOf*1..]->(groupsWithComps:Group) WITH groupsWithComps MATCH (u:User)-[r:MemberOf*1..]->(groupsWithComps) RETURN DISTINCT(groupsWithComps) as groupsWithCompsAndUsers"
    },
    {
        "name": "Groups that can reset passwords (Warning: Heavy)",
        "query": "MATCH p=(m:Group)-[r:ForceChangePassword]->(n:User) RETURN p LIMIT 100"
    },
    {
        "name": "Groups that have local admin rights (Warning: Heavy)",
        "query": "MATCH p=(m:Group)-[r:AdminTo]->(n:Computer) RETURN p LIMIT 100"
    },
    {
        "name": "Users never logged on and account still active",
        "query": "MATCH (n:User) WHERE n.lastlogontimestamp=-1.0 AND n.enabled=TRUE RETURN n "
    },
    {
        "name": "Users logged in the last 90 days",
        "query": "MATCH (u:User) WHERE u.lastlogon < (datetime().epochseconds - (90 * 86400)) and NOT u.lastlogon IN [-1.0, 0.0] RETURN u LIMIT 100"
    },
    {
        "name": "Users with passwords last set in the last 90 days",
        "query": "MATCH (u:User) WHERE u.pwdlastset < (datetime().epochseconds - (90 * 86400)) and NOT u.pwdlastset IN [-1.0, 0.0] RETURN u LIMIT 100"
    },
    {
        "name": "Find if unprivileged users have rights to add members into groups",
        "query": "MATCH (n:User {admincount:False}) MATCH p=allShortestPaths((n)-[r:AddMember*1..]->(m:Group)) RETURN p LIMIT 100"
    },
    {
        "name": "Find all users a part of the VPN group",
        "query": "Match p=(u:User)-[:MemberOf]->(g:Group) WHERE toUPPER (g.name) CONTAINS 'VPN' RETURN p LIMIT 100"
    },
    {
        "name": "Find computers with constrained delegation permissions and the corresponding targets where they allowed to delegate",
        "query": "MATCH (c:Computer) WHERE c.allowedtodelegate IS NOT NULL RETURN c LIMIT 100"
    },
    {
        "name": "Next steps (3 hops) from owned objects",
        "query": "MATCH p=shortestPath((c {owned: true})-[*1..3]->(s)) WHERE NOT c = s RETURN p LIMIT 100"
    },
    {
        "name": "Owned users with permissions against GPOs",
        "query": "MATCH p=(u:User {owned:true})-[r:AllExtendedRights|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|GpLink*1..]->(g:GPO) RETURN p LIMIT 100"
    },
    {
        "name": "Find all other Rights Domain Users shouldn't have",
        "query": "MATCH p=(m:Group)-[r:Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|GenericWrite|AllowedToDelegate|ForceChangePassword]->(n:Computer) WHERE m.objectid ENDS WITH '-513' OR m.objectsid ENDS WITH '-515' OR m.objectsid ENDS WITH 'S-1-5-11' OR m.objectsid ENDS WITH 'S-1-1-0' RETURN p LIMIT 100"
    },
    {
        "name": "Computers with administrative Domain Users",
        "query": "MATCH p=(m:Group)-[r:AddMember|AdminTo|AllExtendedRights|AllowedToDelegate|CanRDP|Contains|ExecuteDCOM|ForceChangePassword|GenericAll|GenericWrite|GetChanges|GetChangesAll|HasSession|Owns|ReadLAPSPassword|SQLAdmin|TrustedBy|WriteDACL|WriteOwner|AddAllowedToAct|AllowedToAct]->(t) WHERE m.objectsid ENDS WITH '-513' OR m.objectsid ENDS WITH '-515' OR m.objectsid ENDS WITH 'S-1-5-11' OR m.objectsid ENDS WITH 'S-1-1-0' RETURN p LIMIT 100"
    },
    {
        "name": "List all owned computers",
        "query": "MATCH (m:Computer) WHERE m.owned=TRUE RETURN m"
    },
    {
        "name": "List all owned groups",
        "query": "MATCH (m:Group) WHERE m.owned=TRUE RETURN m"
    },
    {
        "name": "List all High Valued Targets",
        "query": "MATCH (m) WHERE m.highvalue=TRUE RETURN m"
    },
    {
        "name": "List the groups of all owned users",
        "query": "MATCH (m:User) WHERE m.owned=TRUE WITH m MATCH p=(m)-[:MemberOf*1..]->(n:Group) RETURN p LIMIT 100"
    },
    {
        "name": "Find all Kerberoastable Users",
        "query": "MATCH (n:User)WHERE n.hasspn=true RETURN n LIMIT 100"
    },
    {
        "name": "Find All Users with an SPN/Find all Kerberoastable Users with passwords last set less than 5 years ago",
        "query": "MATCH (u:User) WHERE u.hasspn=true AND u.pwdlastset < (datetime().epochseconds - (1825 * 86400)) AND NOT u.pwdlastset IN [-1.0, 0.0] RETURN u.name, u.pwdlastset order by u.pwdlastset "
    },
    {
        "name": "Find Kerberoastable Users with a path to DA",
        "query": "MATCH (u:User {hasspn:true}) MATCH (g:Group) WHERE g.objectid ENDS WITH '-512' MATCH p = shortestPath( (u)-[*1..]->(g) ) RETURN p LIMIT 100"
    },
    {
        "name": "Find machines Domain Users can RDP into",
        "query": "match p=(g:Group)-[:CanRDP]->(c:Computer) where g.objectid ENDS WITH '-513' RETURN p LIMIT 100"
    },
    {
        "name": "Find what groups can RDP",
        "query": "MATCH p=(m:Group)-[r:CanRDP]->(n:Computer) RETURN p LIMIT 100"
    },
    {
        "name": "Find groups that can reset passwords (Warning: Heavy)",
        "query": "MATCH p=(m:Group)-[r:ForceChangePassword]->(n:User) RETURN p LIMIT 100"
    },
    {
        "name": "Find groups that have local admin rights (Warning: Heavy)",
        "query": "MATCH p=(m:Group)-[r:AdminTo]->(n:Computer) RETURN p LIMIT 100"
    },
    {
        "name": "Find all users that have local admin rights (Warning Can Be Heavy)",
        "query": "MATCH p=(m:User)-[r:AdminTo]->(n:Computer) RETURN p LIMIT 100"
    },
    {
        "name": "Find all users that have local admin rights or Groups (Warning Can Be Heavy)",
        "query": "MATCH p=(m:User)-[r:AdminTo|MemberOf*1..]->(n:Computer) RETURN p LIMIT 100"
    },
    {
        "name": "Find all active Domain Admin sessions",
        "query": "MATCH (n:User)-[:MemberOf]->(g:Group) WHERE g.objectid ENDS WITH '-512' MATCH p = (c:Computer)-[:HasSession]->(n) RETURN p LIMIT 100"
    },
    {
        "name": "Find all computers with Unconstrained Delegation",
        "query": "MATCH (c:Computer {unconstraineddelegation:true}) RETURN c LIMIT 100"
    },
    {
        "name": "Find all computers with unsupported operating systems",
        "query": "MATCH (H:Computer) WHERE H.operatingsystem = '.*(2000|2003|2008|xp|vista|7|me).*' AND H.enabled = TRUE RETURN H LIMIT 100"
    },
    {
        "name": "Find users that logged in within the last 90 days",
        "query": "MATCH (u:User) WHERE u.lastlogon < (datetime().epochseconds - (90 * 86400)) and NOT u.lastlogon IN [-1.0, 0.0] RETURN u LIMIT 100"
    },
    {
        "name": "Find users with passwords last set within the last 90 days",
        "query": "MATCH (u:User) WHERE u.pwdlastset < (datetime().epochseconds - (90 * 86400)) and NOT u.pwdlastset IN [-1.0, 0.0] RETURN u LIMIT 100"
    },
    {
        "name": "Find constrained delegation",
        "query": "MATCH p=(u:User)-[:AllowedToDelegate]->(c:Computer) RETURN p LIMIT 100"
    },
    {
        "name": "Find computers that allow unconstrained delegation that AREN\u2019T domain controllers.",
        "query": "MATCH (c1:Computer)-[:MemberOf*1..]->(g:Group) WHERE g.objectid ENDS WITH '-516' WITH COLLECT(c1.name) AS domainControllers MATCH (c2:Computer {unconstraineddelegation:true}) WHERE NOT c2.name IN domainControllers RETURN c2 LIMIT 100"
    },
    {
        "name": " Return the name of every computer in the database where at least one SPN for the computer contains the string 'MSSQL'",
        "query": "MATCH (c:Computer) WHERE ANY (x IN c.serviceprincipalnames WHERE toUpper(x) CONTAINS 'MSSQL') RETURN c LIMIT 100"
    },
    {
        "name": "View all GPOs",
        "query": "Match (n:GPO) RETURN n LIMIT 100"
    },
    {
        "name": "View all groups that contain the word 'admin'",
        "query": "Match (n:Group) WHERE n.name CONTAINS 'ADMIN' RETURN n LIMIT 100"
    },
    {
        "name": "Find users that can be AS-REP roasted",
        "query": "MATCH (u:User {dontreqpreauth: true}) RETURN u LIMIT 100"
    },
    {
        "name": "Find All Users with an SPN/Find all Kerberoastable Users with passwords last set > 5 years ago",
        "query": "MATCH (u:User) WHERE u.hasspn=true AND u.pwdlastset < (datetime().epochseconds - (1825 * 86400)) and NOT u.pwdlastset IN [-1.0, 0.0] RETURN u LIMIT 100"
    },
    {
        "name": "Show all high value target's groups",
        "query": "MATCH p=(n:User)-[r:MemberOf*1..]->(m:Group {highvalue:true}) RETURN p LIMIT 100"
    },
    {
        "name": "Find groups that contain both users and computers",
        "query": "MATCH (c:Computer)-[r:MemberOf*1..]->(groupsWithComps:Group) WITH groupsWithComps MATCH (u:User)-[r:MemberOf*1..]->(groupsWithComps) RETURN DISTINCT(groupsWithComps) as groupsWithCompsAndUsers"
    },
    {
        "name": "Find Kerberoastable users who are members of high value groups",
        "query": "MATCH (u:User)-[r:MemberOf*1..]->(g:Group) WHERE g.highvalue=true AND u.hasspn=true RETURN u LIMIT 100"
    },
    {
        "name": "Find Kerberoastable users and where they are AdminTo",
        "query": "OPTIONAL MATCH (u1:User) WHERE u1.hasspn=true OPTIONAL MATCH (u1)-[r:AdminTo]->(c:Computer) RETURN u1 LIMIT 100"
    },
    {
        "name": "Find Users/Groups with direct access to GPOs",
        "query": "MATCH p = (n)-[r:AddMember|AddSelf|WriteSPN|AddKeyCredentialLink|AllExtendedRights|ForceChangePassword|GenericAll|GenericWrite|WriteDacl|WriteOwner|Owns]->(g:GPO) RETURN p LIMIT 100"
    },
    {
        "name": "Find if any domain user has interesting permissions against a GPO (Warning: Heavy)",
        "query": "MATCH p=(u:User)-[r:AllExtendedRights|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|GpLink*1..]->(g:GPO) RETURN p LIMIT 100"
    },
    {
        "name": "Find users that have never logged on and account is still active",
        "query": "MATCH (n:User) WHERE n.lastlogontimestamp=-1.0 AND n.enabled=TRUE RETURN n LIMIT 100"
    },
    {
        "name": "Find an object in one domain that can do something to a foreign object",
        "query": "MATCH p=(n)-[r]->(m) WHERE NOT n.domain = m.domain RETURN p LIMIT 100"
    },
    {
        "name": "Find all sessions a user in a specific domain has",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name LIMIT 100"
    },
    {
        "name": "Find an object from domain 'A' that can do anything to a foreign object",
        "query": "MATCH (n:Domain) RETURN n.name ORDER BY n.name LIMIT 100"
    },
    {
        "name": "Find All edges any owned user has on a computer",
        "query": "MATCH p=shortestPath((m:User)-[r*]->(b:Computer)) WHERE m.owned RETURN p LIMIT 100"
    },
    {
        "name": "Find Un-Supported OS and Enabled",
        "query": "MATCH (n:Computer) WHERE n.operatingsystem =~ '(?i).*(2000|2003|2008|xp|vista|7|me).*' AND n.enabled = true RETURN n LIMIT 100"
    },
    {
        "name": "Find Server 2008 with session",
        "query": "MATCH (H:Computer)-[:HasSession]->(y) WHERE H.operatingsystem =~ '(?i).*(2008).*' RETURN H LIMIT 100"
    },
    {
        "name": "Find Windows XP and Enabled",
        "query": "MATCH (H:Computer) WHERE H.operatingsystem =~ '(?i).*(xp).*' AND H.enabled = true RETURN H LIMIT 100"
    },
    {
        "name": "Find Windows XP with session",
        "query": "MATCH (H:Computer)-[:HasSession]->(y) WHERE H.operatingsystem =~ '(?i).*(xp).*' RETURN H LIMIT 100"
    },
    {
        "name": "Find Windows 7 and Enabled",
        "query": "MATCH (H:Computer) WHERE H.operatingsystem =~ '(?i).*(7).*' AND H.enabled = true RETURN H LIMIT 100"
    },
    {
        "name": "Find Windows 7 session",
        "query": "MATCH (H:Computer)-[:HasSession]->(y) WHERE H.operatingsystem =~ '(?i).*(7).*' RETURN H LIMIT 100"
    },
    {
        "name": "Find Server 2012 and Enabled",
        "query": "MATCH (H:Computer) WHERE H.operatingsystem =~ '(?i).*(2012).*' AND H.enabled = true RETURN H LIMIT 100"
    },
    {
        "name": "Find Server 2012 with session",
        "query": "MATCH (H:Computer)-[:HasSession]->(y) WHERE H.operatingsystem =~ '(?i).*(2012).*' RETURN H LIMIT 100"
    },
    {
        "name": "Find Server 2016 and Enabled",
        "query": "MATCH (H:Computer) WHERE H.operatingsystem =~ '(?i).*(2016).*' AND H.enabled = true RETURN H LIMIT 100"
    },
    {
        "name": "Find Server 2016 with session",
        "query": "MATCH (H:Computer)-[:HasSession]->(y) WHERE H.operatingsystem =~ '(?i).*(2016).*' RETURN H LIMIT 100"
    },
    {
        "name": "Find Server 2019 and Enabled",
        "query": "MATCH (H:Computer) WHERE H.operatingsystem =~ '(?i).*(2019).*' AND H.enabled = true RETURN H LIMIT 100"
    },
    {
        "name": "Find Server 2019 with session",
        "query": "MATCH (H:Computer)-[:HasSession]->(y) WHERE H.operatingsystem =~ '(?i).*(2019).*' RETURN H LIMIT 100"
    },
    {
        "name": "Find Server 2022 and Enabled",
        "query": "MATCH (H:Computer) WHERE H.operatingsystem =~ '(?i).*(2022).*' AND H.enabled = true RETURN H LIMIT 100"
    },
    {
        "name": "Find Server 2022 with session",
        "query": "MATCH (H:Computer)-[:HasSession]->(y) WHERE H.operatingsystem =~ '(?i).*(2022).*' RETURN H LIMIT 100"
    },
    {
        "name": "All Users with a homedirectory",
        "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(u:User) WHERE u.homedirectory =~ '(?i).*.*' RETURN p LIMIT 100"
    },
    {
        "name": "All Computers without LAPS - with session",
        "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(c:Computer)-[:HasSession]->(y) WHERE c.haslaps = false RETURN p LIMIT 100"
    },
    {
        "name": "All enabled computers with a description",
        "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(c:Computer) WHERE c.description =~ '(?i).*.*' RETURN p LIMIT 100"
    },
    {
        "name": "All enabled computers with a description containing the word file",
        "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(c:Computer) WHERE c.description =~ '(?i).*file.*' RETURN p LIMIT 100"
    },
    {
        "name": "Locate enabled accounts with display name of admin - put anyname in you like",
        "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(u:User) WHERE u.displayname =~ '(?i).*admin*' AND u.enabled = true RETURN p LIMIT 100"
    },
    {
        "name": "Find all users with passwords set over 720 days ago (23 months)",
        "query": "MATCH (u:User) WHERE u.enabled=true AND u.pwdlastset < (datetime().epochseconds - (720 * 86400)) and NOT u.pwdlastset IN [-1.0, 0.0] RETURN u LIMIT 100"
    },
    {
        "name": "Find all users with passwords set over 1440 days ago (47 months)",
        "query": "MATCH (u:User) WHERE u.enabled=true AND u.pwdlastset < (datetime().epochseconds - (1440 * 86400)) and NOT u.pwdlastset IN [-1.0, 0.0] RETURN u LIMIT 100"
    },
    {
        "name": "Find all Domain Admins (nested SID S-1-5-21-.*-512) having a session opened on a domain computer",
        "query": "MATCH (m:User)-[r:MemberOf*1..]->(n:Group) WHERE n.objectid =~ '(?i)S-1-5-.*-512' WITH m MATCH q=((m)<-[:HasSession]-(o:Computer)) RETURN q LIMIT 100"
    },
    {
        "name": "Find users that haven't logged on in 720 days and account is still active",
        "query": "MATCH (n:User) WHERE n.lastlogontimestamp < (datetime().epochseconds - (720 * 86400)) AND n.enabled=TRUE RETURN n LIMIT 100"
    },
    {
        "name": "Search for key words in users title such as scientist or Executive - tweak as required",
        "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(u:User) WHERE u.title =~ '(?i).*scientist*' AND u.enabled = true RETURN p LIMIT 100"
    }
]